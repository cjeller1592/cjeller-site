I"»"<p>I wanted to take the AppLocker lab from the <em>Getting Started in Security</em> class off-road a bit. I started by asking a single question:</p>

<blockquote>
  <p>How could an attacker bypass AppLocker?</p>
</blockquote>

<p>A search brought me to a post from Will Dormann called <a href="https://insights.sei.cmu.edu/cert/2016/06/bypassing-application-whitelisting.html">Bypassing Application Whitelisting</a>. He explains how malicious code doesn‚Äôt always take the form of an executable application file. So what form can it take? Let‚Äôs use Windows Calculator as an example.</p>

<p>Windows Calculator utilizes dynamic link libraries (DLL) to function. As soon as the Calculator boots up, these libraries are called by the program. Each Windows machine has a set of dynamic link libraries (usually in the <code class="language-plaintext highlighter-rouge">System32</code> folder) that programs call upon to perform everything from DNS lookups to simple addition.</p>

<p>What if Windows Calculator could be tricked into running a DLL that put malware onto the machine instead of performing simple addition? Enter DLL hijacking.</p>

<h2 id="dll-hijacking">DLL Hijacking</h2>

<p>Dormann outlines the steps of DLL highjacking in his post, but I‚Äôll recontexualize them for the lab VM.</p>

<p>So first let‚Äôs make sure that all the AppLocker defaults are on (<code class="language-plaintext highlighter-rouge">Local Security Policy -&gt; Application Control Policies -&gt; AppLocker</code>) and that <code class="language-plaintext highlighter-rouge">Application Indentity</code> in Services is running. We‚Äôll then go into the  <code class="language-plaintext highlighter-rouge">C:\</code> directory and create a new folder ‚Äî <code class="language-plaintext highlighter-rouge">asdf</code> for example. This is where we‚Äôll take a copy of Windows Calculator (<code class="language-plaintext highlighter-rouge">C:\Windows\system32\calc.exe</code>) and place it into the <code class="language-plaintext highlighter-rouge">asdf</code> folder.</p>

<p>This is where it get‚Äôs interesting. Dormann recommends we install a Windows program called <a href="https://docs.microsoft.com/en-us/sysinternals/downloads/procmon">Process Monitor</a> (Procmon for short). Here‚Äôs a description of what Procmon does from the Microsoft page:</p>

<blockquote>
  <p><em>Process Monitor</em> is an advanced monitoring tool for Windows that shows real-time file system, Registry and process/thread activity.</p>
</blockquote>

<p>What this means is that Procmon can monitor what DLL‚Äôs are called when an application runs. Let‚Äôs try using it on our copied Calculator program.</p>

<p>Since there are <em>a lot</em> of processes going on, we‚Äôll need to use Procmon to filter through through the noise. How can we get it to focus on our copied Calculator program? Open Procmon, select <code class="language-plaintext highlighter-rouge">Filter</code> from the navigation bar, and create two filters:</p>

<blockquote>
  <p>Path contains Folder Name</p>

  <p>Process Name contains calc</p>
</blockquote>

<p>Minimize Procmon and run the copied Calculator program. Let‚Äôs check out our results in the Procmon window.</p>

<p><img src="/images/Procmon-Results.png" alt="Procmon Results of running the Calculator program" /></p>

<p>One thing that sticks out is that some DLL files come with a <code class="language-plaintext highlighter-rouge">NAME NOT FOUND</code> result. This means that Windows Calculator couldn‚Äôt find those DLL‚Äôs to call upon. Dormann mentions how these DLL‚Äôs are the prime candidates for hijacking ‚Äî we can create a malicious DLL file and rename it as one of the DLL‚Äôs that the Calculator program is looking for. When the Calculator program runs, it‚Äôll call upon that malicious DLL.</p>

<p>So let‚Äôs take the highlighted DLL in the image, <code class="language-plaintext highlighter-rouge">profapi.dll</code>, as our candidate for DLL hijacking. What we‚Äôll do is use Dormann‚Äôs suggestion, a library from Stefan Kanthak called SENTINEL.DLL (<a href="https://skanthak.homepage.t-online.de/download/SENTINEL.CAB">download here</a>). Here‚Äôs Dormann‚Äôs description of the library (with a caveat)</p>

<blockquote>
  <p>When certain exported functions are executed, this library displays a dialog that indicates the vulnerable behavior. Versions of this DLL are available for several architectures in the <code class="language-plaintext highlighter-rouge">SENTINEL.CAB</code> file provided by Stefan. As with any untrusted code, this testing should take place only in an isolated environment, such as a standalone virtual machine.</p>
</blockquote>

<p>I didn‚Äôt have any issues with downloading and using SENTINEL.DLL but I understand Dormann‚Äôs caution. Anyways, once downloaded, we‚Äôll drag the 64-bit version of SENTINEL (should be the first DLL file in the download) into our copied Windows Calculator folder. Once there, rename it as <code class="language-plaintext highlighter-rouge">profapi.dll</code>. Your folder should look something like this:</p>

<p><img src="/images/Procmon-Results.png" alt="Calculator and DLL in folder" /></p>

<p>Now let‚Äôs switch over to the Allowlist user and see if DLL hijacking can work. Go to the copied Calculator program folder and try to  run it. You should see something like this:</p>

<p><img src="/images/DLL-Message.png" alt="Screen Shot 2020-11-23 at 8.23.34 PM" /></p>

<p>This should then be followed by the normal blocked application screen:</p>

<p><img src="/images/Blocked-App.png" alt="Screen Shot 2020-11-23 at 8.23.40 PM" /></p>

<p>Emphasis on ‚Äúshould‚Äù here. Your results may vary ‚Äî sometimes AppLocker blocked my attempts to run the program entirely. Other times, like the one I snapshot, the ‚Äúmalicious‚Äù DLL ran anyway. It goes to show that we <em>can</em> get around Application Whitelisting. As Dormann writes,</p>

<blockquote>
  <p>[‚Ä¶] we‚Äôve run an executable file, which is signed by Microsoft, but the code that executed was definitely not the expected code!</p>
</blockquote>

<p>A wrinkle we can add to AppLocker to prevent this kind of attack is DLL Whitelisting. Apparently it‚Äôs disabled by default because of performance issues. I guess you can‚Äôt blame them if you think about it. There are a lot of DLL‚Äôs that have to run through DLL whitelisting policies. That‚Äôll take time and effort, maybe enough to make a noticeable performance difference. If you want to enable DLL Whitelisting, check out <a href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/ee460947(v=ws.11)?redirectedfrom=MSDN">the Microsoft docs</a>. Try to run the DLL hijacking program again and see if it executes this time.</p>

<h2 id="and-more">And More?</h2>

<p>But DLL hijacking isn‚Äôt the only way to bypass AppLocker &amp; Application Whitelisting. Dormann mentions other viable methods including the use of <a href="https://github.com/kasif-dekel/Microsoft-Applocker-Bypass">rundll32.exe</a>, <a href="https://pentestlab.blog/2017/05/11/applocker-bypass-regsvr32/">regsvr32.exe</a>, and <a href="http://www.powershellempire.com/">Powershell</a>. Even if we restrict application execution to paths not writable by normal user accounts, these utilities circumvent security policies in one form or another.</p>

<p>I haven‚Äôt tried any of these exploits out yet but y‚Äôall totally should (and let me know how it goes).</p>

<h2 id="not-enough-by-itself">Not Enough (By Itself)</h2>

<p>This conclusion goes back to what John mentioned about AppLocker &amp; Application Whitelisting in our class ‚Äî you should have these utilities turned on but they shouldn‚Äôt be your only line of defense. AppLocker &amp; Application Whitelisting works great for drive-by exploits but won‚Äôt stand a chance against concentrated efforts where an attacker knows what to do when she encounters these defenses. Dormann puts it well at the end of his post:</p>

<blockquote>
  <p>Application whitelisting is a useful capability that can help prevent users and attackers from running unexpected applications. Application whitelisting should <strong>not</strong>, however, be treated as a feature that prevents malicious code from executing. Microsoft admits that ‚Äú<a href="https://github.com/kasif-dekel/Microsoft-Applocker-Bypass#microsfts-response">AppLocker is not a security feature and was never designed as a security boundary</a>.‚Äù Other vendors may not be as forthcoming about what their application whitelisting products can and cannot practically achieve.</p>

  <p>[‚Ä¶]</p>

  <p>Don‚Äôt consider application whitelisting to be a silver bullet. While it is a valuable part of any enterprise‚Äôs protections, application whitelisting will not stop a motivated attacker.</p>
</blockquote>

<p>And that‚Äôs where a motivated defender comes in.</p>
:ET